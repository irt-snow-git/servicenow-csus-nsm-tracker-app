<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Angular Controller for the Submit Issue page. </description>
        <global>false</global>
        <name>x_casus_nsm_issue.angular_controller</name>
        <script><![CDATA[var myApp = angular.module('myApp', []);
var instrumentReferences = [];//Global variable to hold array of instruments
instrumentReferences = getReferences();//AJAX call

var tempDate = new Date(getCurrentDate());//AJAX to get current date. Use string below to format it
var tempDateString = tempDate.getMonth() + 1;  // returns 0 - 11, so add 1
tempDateString += "/" + tempDate.getDate();    // returns day
tempDateString += "/" + tempDate.getFullYear();// returns year

// - - - Begin Controller - - - //
myApp.controller('Issue', ['$scope', function ($scope) {
	$scope.async = 0;
	$scope.submission = 0;
	$scope.data = {//Holds data that we will send to server for insert
		"submitter": "",
		"submitter_id": "",
		"issue_type": "",
		"date": "",
		"time":"",
		"priority": "3",
		"subject": "",
		"notes": "",
		"instrument": ""
	};
	//Set default to current date
	
	$scope.data.date = tempDateString;
	$scope.issuesList = instrumentReferences;
	console.log($scope.issuesList);
	//$scope.data.submitter = g_user.getFullName();// Default to signed in user
	$scope.data.submitter = g_user.lastName + " " + g_user.firstName;
	$scope.data.submitter_id = g_user.userID;// Need the sys_id for submission later
	$scope.async = 1;
	
	// - - - -End Init - - - -//
	
	// - - - Validation Checks - - - - //
	$scope.validate = function () {
		if ((!$scope.data.issue_type) || (!$scope.data.instrument)) {
			alert("Please select an Issue Type and Instrument before submitting");
		} else {
			$scope.submitRecordAjax();
		}
	};
	
	// - - - - Submit Record - - - - //
	$scope.submitRecordAjax = function () {
		var date = gel(datepicker).value;
		date = new Date(date);
		var stringDate = date.toISOString();
		stringDate = stringDate.substr(0,10);//Get the first few characters, removing extra stuff
		// Time stuff //
		var timepicker = $('.timepicker').wickedpicker();
		var tempTime = timepicker.wickedpicker('time');
		tempTime = tempTime.replace(/\s+/g, '');//Remove spaces that the jquery plugin adds between semicolon
		len = tempTime.length;
		//Add the space back between the time and AM/PM
		tempTime = tempTime.slice(0,len-2) + " " + tempTime.slice(len-2);
		var time24 = ConvertTimeFormat(tempTime);// convert to 24 hour format
		stringDate = stringDate + " " + time24 + ":00"; 
		//Call to server to actually submit
		var ajax = new GlideAjax('x_casus_nsm_issue.retrieveRecordsInTable');
		ajax.addParam('sysparm_name','submitRecord');
		ajax.addParam('sysparm_submitter', $scope.data.submitter_id);
		ajax.addParam('sysparm_instrument', $scope.data.instrument);
		ajax.addParam('sysparm_issue_type', $scope.data.issue_type);
		ajax.addParam('sysparm_priority', $scope.data.priority);
		ajax.addParam('sysparm_subject', $scope.data.subject);
		ajax.addParam('sysparm_notes', $scope.data.notes);
		ajax.addParam('sysparm_date_time', stringDate);
		ajax.getXML(function () {});
		$scope.submission = 1;

		//Redirect user
		var url = location.hostname;
		window.location = url + '\/nav_to.do?uri=%2Fx_casus_nsm_issue_issue_list.do%3Fsysparm_query%3DsubmitterDYNAMIC90d1921e5f510100a9ad2572f2b477fe%255Estate%253D1%255EEQ';
	};
}])// - - -END Controller- - - //


/* Provides autopopulated dropdown menu. 
*/
.directive('customDropdown', function() {
	return {
		restrict: 'C',
		template : 
			'<datalist id="supplyList">' +
			'<div ng-repeat="sup in suppliesAll track by $index">' +
				'<option value="{{sup.supply_type}}">' + 
			'</div>' +
			'</datalist>'
	};
})//- - End Directive - - //


;//- - - - -End App- - - - -//


// - - - Handlers and Other Functions - - - //

function handleInstruments(response) {
	var data = response.responseXML.getElementsByTagName("issues");
	var temp = {};
	var index = 0;
	for (var i = 0; i < data.length; i++ ) {
		var issue_sys_id = data[i].getAttribute("issue_sys_id");
		var issue_name = data[i].getAttribute("issue_name");
		var instrument_sys_id = data[i].getAttribute("instrument_sys_id");
		var instrument_name = data[i].getAttribute("instrument_name");
		var ref = {
				'issue_sys_id': '',
				'issue_name': "",
				'instruments': []//Multiple instruments can belong to single issue type
		};
		var pushCheck = false;
		//Check if we already created the issue_type
		if ((!temp[issue_sys_id]) && (temp[issue_sys_id] != 0)) {
			temp[issue_sys_id] = index;//get the index for later use
			index++;
			ref.issue_sys_id = issue_sys_id;
			ref.issue_name = issue_name;
			pushCheck = true;
		} else {
			// already exists, retrieve from array
			ref = instrumentReferences[temp[issue_sys_id]];
		}
		var subRef = {
			'instrument_sys_id': "",
			'instrument_name': ""
		};
		subRef.instrument_sys_id = instrument_sys_id;
		subRef.instrument_name = instrument_name;
		ref.instruments.push(subRef);
		if (pushCheck) {instrumentReferences.push(ref);}
	}//End For
	
}
/*
Uses a global variable to store all the supplies
*/
function getReferences() {
	var ajax = new GlideAjax('x_casus_nsm_issue.retrieveRecordsInTable');
	ajax.addParam('sysparm_name','getRecords');
	ajax.getXML(handleInstruments);
	ajax.getXMLWait();
	//Now the supply references should have data (sys_id and supply_type)
	return instrumentReferences;
}

function getCurrentDate() {
	var date;
	var ajax = new GlideAjax('x_casus_nsm_issue.retrieveRecordsInTable');
	ajax.addParam('sysparm_name','nowDateTime');
	ajax.getXML(function ()  {
		date = ajax.getAnswer();	
	});
	ajax.getXMLWait();
	//Date is weird, this replaces hyphens with slashes, which gives proper date
	return date.replace(/-/g, '\/');
}
/*
 Converts AM/PM time to 24 hour time. This expects format of (##:## AA) [note the space]
*/
function ConvertTimeFormat(str) {
    var time = str;
    var hours = Number(time.match(/^(\d+)/)[1]);
    var minutes = Number(time.match(/:(\d+)/)[1]);
    var AMPM = time.match(/\s(.*)$/)[1];
    if (AMPM == "PM" && hours < 12) hours = hours + 12;
    if (AMPM == "AM" && hours == 12) hours = hours - 12;
    var sHours = hours.toString();
    var sMinutes = minutes.toString();
    if (hours < 10) sHours = "0" + sHours;
    if (minutes < 10) sMinutes = "0" + sMinutes;
    return (sHours + ":" + sMinutes);
}]]></script>
        <script_name>angular_controller</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>gg622</sys_created_by>
        <sys_created_on>2017-05-15 22:16:45</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e8c397306f36b200ad6cd4a21c3ee40e</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>x_casus_nsm_issue.angular_controller</sys_name>
        <sys_package display_value="NSM Issue Tracker" source="x_casus_nsm_issue">510636e76fea3200ad6cd4a21c3ee48c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="NSM Issue Tracker">510636e76fea3200ad6cd4a21c3ee48c</sys_scope>
        <sys_update_name>sys_ui_script_e8c397306f36b200ad6cd4a21c3ee40e</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-06-02 17:44:05</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
